{"ast":null,"code":"var _jsxFileName = \"/Users/akshayraichur/Projects/College-Projects/SD-Lab/ces-xp-demo/Web/frontend/src/Context/AuthContext.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Authenticate } from \"../Helpers/Auth\";\nexport const AuthContext = React.createContext();\nexport default (({\n  children\n}) => {\n  const [isLoaded, setIsLoaded] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState({});\n  useEffect(() => {\n    if (localStorage.getItem(\"access_token\") && localStorage.getItem(\"user\")) {\n      const access_token = JSON.parse(localStorage.getItem(\"access_token\"));\n      const userStorage = JSON.parse(localStorage.getItem(\"user\"));\n    } // Authenticate().then((data) => {\n    //   if (!data) {\n    //     console.log(\"There is an error in connecting to db\");\n    //   }\n    //   setUser(data.user);\n    //   setIsAuthenticated(data.isAuthenticated);\n    //   setIsLoaded(true);\n    // });\n\n  }, []);\n  return (\n    /*#__PURE__*/\n    //   or can also be used simply with <></Redirect>\n    React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 5\n      }\n    }, isLoaded ? /*#__PURE__*/React.createElement(AuthContext.Provider, {\n      value: {\n        user,\n        setUser,\n        isAuthenticated,\n        setIsAuthenticated\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }\n    }, children) : /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }\n    }, \"Loading.....\"))\n  );\n});","map":{"version":3,"sources":["/Users/akshayraichur/Projects/College-Projects/SD-Lab/ces-xp-demo/Web/frontend/src/Context/AuthContext.js"],"names":["React","useState","useEffect","Redirect","Authenticate","AuthContext","createContext","children","isLoaded","setIsLoaded","isAuthenticated","setIsAuthenticated","user","setUser","localStorage","getItem","access_token","JSON","parse","userStorage"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,OAAO,MAAMC,WAAW,GAAGL,KAAK,CAACM,aAAN,EAApB;AAEP,gBAAe,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC/B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACS,eAAD,EAAkBC,kBAAlB,IAAwCV,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,YAAY,CAACC,OAAb,CAAqB,cAArB,KAAwCD,YAAY,CAACC,OAAb,CAAqB,MAArB,CAA5C,EAA0E;AACxE,YAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAX,CAArB;AACA,YAAMI,WAAW,GAAGF,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAApB;AACD,KAJa,CAMd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD,GAdQ,EAcN,EAdM,CAAT;AAgBA;AAAA;AACE;AACA,wBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGP,QAAQ,gBAEL,oBAAC,WAAD,CAAa,QAAb;AACE,MAAA,KAAK,EAAE;AAAEI,QAAAA,IAAF;AAAQC,QAAAA,OAAR;AAAiBH,QAAAA,eAAjB;AAAkCC,QAAAA;AAAlC,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGGJ,QAHH,CAFK,gBASL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAVN;AAFF;AAgBD,CArCD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Authenticate } from \"../Helpers/Auth\";\n\nexport const AuthContext = React.createContext();\n\nexport default ({ children }) => {\n  const [isLoaded, setIsLoaded] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState({});\n\n  useEffect(() => {\n    if (localStorage.getItem(\"access_token\") && localStorage.getItem(\"user\")) {\n      const access_token = JSON.parse(localStorage.getItem(\"access_token\"));\n      const userStorage = JSON.parse(localStorage.getItem(\"user\"));\n    }\n\n    // Authenticate().then((data) => {\n    //   if (!data) {\n    //     console.log(\"There is an error in connecting to db\");\n    //   }\n    //   setUser(data.user);\n    //   setIsAuthenticated(data.isAuthenticated);\n    //   setIsLoaded(true);\n    // });\n  }, []);\n\n  return (\n    //   or can also be used simply with <></Redirect>\n    <React.Fragment>\n      {isLoaded\n        ? (\n          <AuthContext.Provider\n            value={{ user, setUser, isAuthenticated, setIsAuthenticated }}\n          >\n            {children}\n          </AuthContext.Provider>\n        )\n        : (\n          <h1>Loading.....</h1>\n        )}\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}